View(adData)
str(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
which(LETTERS == 'R')
which((1:12) %% 2 == 0)
qt(0.05/2, 7)
source('~/Dropbox/Coursera/Practical Machine Learning/Project/Project.R')
install.packages("rattle")
source('~/.active-rstudio-document')
library(caret)
library(ggplot2)
library(gridExtra)
library(rpart)
library(randomForest)
library(rattle)
library(doMC)
registerDoMC(cores = 4)
# The data is imported from hard drive and into to R memory. The data can also be imported directly from the URL as well.
training <- read.csv("~/Dropbox/Coursera/Practical Machine Learning/Project/pml-training.csv")
testing <- read.csv("~/Dropbox/Coursera/Practical Machine Learning/Project/pml-testing.csv")
# Inspecting the data, several column vectors that are empty and with NA values are found. This can be dealt with by specifying na.strings during import itself.
training <- read.csv("~/Dropbox/Coursera/Practical Machine Learning/Project/pml-training.csv", na.strings = c(NA, '', '#DIV/0!'))
testing <- read.csv("~/Dropbox/Coursera/Practical Machine Learning/Project/pml-testing.csv", , na.strings = c(NA, '', '#DIV/0!'))
dim(training); dim(testing)
# Examining the data suggests there are still columns with high percentage of NA values
training <- training[ , (nrow(training) - colSums(is.na(training)))/nrow(training) > 0.9]
testing  <-  testing[ , (nrow(testing) - colSums(is.na(testing)))/nrow(testing) > 0.9]
dim(training); dim(testing)
# Plot the interactions by user, by classe.
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
plot1 <- ggplot(data = training, aes(x = user_name, y = total_accel_belt)) + geom_point(aes(colour = classe))
plot2 <- ggplot(data = training, aes(x = user_name, y = total_accel_arm)) + geom_point(aes(colour = classe))
plot3 <- ggplot(data = training, aes(x = user_name, y = total_accel_dumbbell)) + geom_point(aes(colour = classe))
plot4 <- ggplot(data = training, aes(x = user_name, y = total_accel_forearm)) + geom_point(aes(colour = classe))
grid_arrange_shared_legend(plot1, plot2, plot3, plot4)
ggplot(data = training, aes(x = total_accel_belt, y = accel_belt_x )) + geom_point() + facet_wrap(~classe, nrow =1)
ggplot(data = training, aes(x = total_accel_forearm, y = pitch_forearm )) + geom_point() + facet_wrap(~classe, nrow =1)
ggplot(data = training, aes(x = total_accel_dumbbell, y = magnet_dumbbell_z )) + geom_point() + facet_wrap(~classe, nrow =1)
# Removing the columns that will not be used in prediction
myTraining <- training[ , 8:60]
mTesting <- testing[ , 8:60]
dim(training); dim(testing)
# Convert the response variable to a factor variable, to be predicted
training$classe <- factor(training$classe)
# Create models for prediction:
# The goal of your project is to predict the manner in which they did the exercise. This is the "classe" variable
# in the training set. You may use any of the other variables to predict with. You should create a report describing
# how you built your model, how you used cross validation, what you think the expected out of sample error is, and why
# you made the choices you did. You will also use your prediction model to predict 20 different test cases.
# caret allows us to specify a trainControl function that can be applied across all model predictions. Lets
# first define the trainControl parameter
# Lets use a 5-fold cross-validation
trnCtrl <- trainControl(method = 'cv',
number = 5,
allowParallel = TRUE,
verboseIter = TRUE)
model1 <- train(classe ~ .,
data = training,
method = 'rf',
trControl = trnCtrl)
model2 <- train(classe ~ .,
data = training,
method = 'knn',
trControl = trnCtrl)
# c("roll_belt", "pitch_belt", "yaw_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "",
#  "accel_belt_y", "accel_belt_z", "magnet_belt_x",  "magnet_belt_y", "magnet_belt_z")
#
# pml_write_files = function(x){
#   n = length(x)
#   for(i in 1:n){
#     filename = paste0("problem_id_",i,".txt")
#     write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
#   }
# }
#
# x <- evaluation_data
# x <- x[feature_set[feature_set!='classe']]
# answers <- predict(rf, newdata=x)
#
# answers
#
# pml_write_files(answers)
library(ggplot2)
ggplot(data = training, aes(x = total_accel_belt, y = accel_belt_x )) + geom_point() + facet_wrap(~classe, nrow =1)
ggplot(data = myTraining, aes(x = total_accel_belt, y = accel_belt_x )) + geom_point() + facet_wrap(~classe, nrow =1)
library(ggplot)
library(ggplot2)
library(knitr)
install.packages("knitr")
qf(0.95, df1 = 19, df2 = 24)
4.405/0.643
qf(0.95, df1 = 2, df2 = 36)
19*3
117-57
60/24
19/2.5
60/21
19/2.857
library(SDSFoundations)
?data
data()
film <- data(FilmData)
str(film)
film <- FilmData
View(film)
fivenum(film$Days)
boxplot(film$Days, main = 'Days in Theaters', xlab = 'All Films', ylab = '# of days')
hist(film$Days)
boxplot(film$Days ~ film$Genre, main = "Days in Theaters", xlab = 'Genrea', ylab = '# of days')
aggregate(Days ~ Genre, data = film)
aggregate(Days ~ Genre, film)
aggregate(Days ~ Genre, film, mean)
?aggregate
aggregate(Days ~ Genre, film, sd)
daysModel <- aov(film$Days ~ film$Genre)
summary(daysModel)
TukeyHSD(daysModel)
library(MASS)
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
View(Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
summary(fit4)
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
`###Qualitative predictors
names(Carseats)
summary(Carseats)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats$ShelveLoc)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
OCCPerf = data.frame()
OCCPerf = edit(OCCPerf, factor.mode = "numeric")
X11()
ls
ls()
OCC <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/OCC/OCC.csv")
View(OCC)
str(OCC)
library(ggplot2)
ggplot(ddata = OCC, aes(x = Year, y = Tickets)) + geom_point()
ggplot(ddata = OCC, aes(y = Tickets)) + geom_point()
ggplot(data = OCC, aes(x = Year, y = Tickets)) + geom_point()
Figure01 = ggplot(data = OCC, aes(x = Year, y = Tickets, )) + geom_point()
Figure01
class(OCC)
dim(OCC); class(OCC)
Figure01 + scale_x_continuous(breaks = c(2013, 2014, 2015))
Figure01 = Figure01 + scale_x_continuous(breaks = c(2013, 2014, 2015))
str(OCC)
Figure02 = ggplot(data = OCC, aes(x = Month, y = Tickets)) +
geom_point(stat = "identity")
Figure02
Figure02 + geom_point(color = factor(Year))
Figure02 + geom_point(color = factor(OCC$Year))
Figure02 = ggplot(data = OCC, aes(x = Month, y = Tickets)) +
geom_point(stat = "identity", color = factor(OCC$Year))
Figure02 = ggplot(data = OCC, aes(x = Month, y = Tickets)) +
geom_point(stat = "identity", color = factor(OCC$Year), size = 3)
Figure02 = ggplot(data = OCC, aes(x = Month, y = Tickets)) +
geom_point(stat = "identity", color = factor(OCC$Year), size = 5)
Figure02 = ggplot(data = OCC, aes(x = Month, y = Tickets)) +
geom_point(stat = "identity", aes(color = factor(OCC$Year), size = 5))
Figure03 = ggplot(data = OCC, aes(x = Month, y = Tickets, size = 1.5)) + geom_point()
Figure03 = ggplot(data = OCC, aes(x = Month, y = Tickets, size = 5)) + geom_point()
Figure03 = ggplot(data = OCC, aes(x = Month, y = Tickets)) + geom_point(size = 5)
data(mtcars)
dim(mtcars)
dim(mtcars); str(mtcars)
rm(ls())
rm(list = ls())
data(mtcars)
dim(mtcars); str(mtcars)
sessionInfo()
library(gg)
library(ggplot2)
data(mtcars)
dim(mtcars); str(mtcars)
p = ggplot(mtcars, aes(wt, mpg))
p + geom_point()
p + geom_point(aes(color = qsec))
p + geom_point(aes(alpha = qsec))
OCC <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/OCC/OCC.csv")
View(OCC); str(OCC)
Fig  = ggplot(data = OCC, aes(x = Year, y = Tickets))
Fig + geom_pint()
Fig + geom_point()
Fig + geom_point(aes(color = alpha(Year)))
Fig + geom_point(aes(color = Year))
Fig + geom_point(breaks = c(2013, 2014, 2015))
Fig + geom_point(aes(color = Year))
Fig + scale_x_continuous(breaks = c(2013, 2014, 2015))
Fig  = ggplot(data = OCC, aes(x = Year, y = Tickets))
Fig + geom_point()
Fig + geom_point(aes(color = Year))
Fig + scale_x_continuous(breaks = c(2013, 2014, 2015))
Fig  = ggplot(data = OCC, aes(x = Year, y = Tickets))
Fig + geom_point()
Fig + scale_x_continuous(breaks = c(2013, 2014, 2015))
Fig  = ggplot(data = OCC, aes(x = Year, y = Tickets))
Fig + geom_point()
Fig + scale_x_continuous(breaks = c(2013, 2014, 2015))
Fig  = ggplot(data = OCC, aes(x = Year, y = Tickets))
Fig + geom_point()
Fig + geom_point(aes(color = Year))
Fig + geom_point(aes(color = Year), breaks = c(2013, 2014, 2015))
Fig + geom_point(color = 'red', size = 3)
Fig + geom_point(color = 'red', size = 5)
Fig + geom_point(color = 'red', size = 3)
Fig + geom_point(color = 'red', size = 4)
Fig + geom_point(aes(color = Year))
Fig + geom_point(color = 'red', size = 4) + geom_point(color = 'pink', size = 4)
Fig + geom_point(color = 'black', size = 3) + geom_point(color = 'pink', size = 4)
Fig + geom_point(color = 'pink', size = 4)
Fig + geom_point(color = 'pink', size = 5) + geom_point(aes(shape = factor(Year)))
Fig + geom_point(color = 'black', size = 3) + geom_point(color = 'pink', size = 4, show_guide = TRUE)
Fig + geom_point(color = 'black', size = 3) + geom_point(color = 'pink', size = 4)
Fig + geom_point(color = 'pink', size = 5) + geom_point(aes(shape = factor(Year)))
Fig + geom_point(color = 'black', size = 3)
Fig + geom_point(aes(color = Year))
Fig + geom_point(aes(color = Year), low = 'red')
Fig + geom_point(color = 'pink', size = 5) + geom_point(aes(shape = factor(Year)))
Fig + geom_point(color = 'pink', size = 7) + geom_point(aes(shape = factor(Year)))
Fig + geom_point(color = 'pink', size = 7, show_guide = TRUE) + geom_point(aes(shape = factor(Year)))
Fig + geom_point(color = 'pink', size = 7, show_guide = TRUE) + geom_point(aes(shape = factor(Year)), title(mmain = Year))
Fig + geom_point(color = 'pink', size = 7, show_guide = TRUE) +
geom_point(aes(shape = factor(Year))) +
scale_x_continuous(breaks = c(2013, 2014, 2015))
Fig  = ggplot(data = OCC, aes(x = Year, y = 1/Tickets))
Fig + geom_point(color = 'pink', size = 7, show_guide = TRUE) +
geom_point(aes(shape = factor(Year))) +
scale_x_continuous(breaks = c(2013, 2014, 2015))
View(OCC); str(OCC)
Fig + geom_point(color = 'purple', size = 7, show_guide = TRUE) +
geom_point(aes(shape = factor(Year))) +
scale_x_continuous(breaks = c(2013, 2014, 2015))
Fig + geom_point(color = 'light purple', size = 7, show_guide = TRUE) +
geom_point(aes(shape = factor(Year))) +
scale_x_continuous(breaks = c(2013, 2014, 2015))
colors()
Fig + geom_point(color = 'slateblue1', size = 7, show_guide = TRUE) +
geom_point(aes(shape = factor(Year))) +
scale_x_continuous(breaks = c(2013, 2014, 2015))
Fig + geom_point(color = 'seagreen1', size = 7, show_guide = TRUE) +
geom_point(aes(shape = factor(Year))) +
scale_x_continuous(breaks = c(2013, 2014, 2015))
table(OCC$Month)
d <- data.frame(Team1=c("Cowboys", "Giants", "Eagles", "Redskins"), Win=c(20, 13, 9, 12))
p <- ggplot(d, aes(y=Win)) + opts(axis.text.x=theme_text(angle=90, hjust=1))
p <- ggplot(d, aes(y=Win)) + theme(axis.text.x=theme_text(angle=90, hjust=1))
OCC$Month = factor(OCC$Month, c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul','Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
OCC = na.omit(OCC)
View(OCC)
Fig + geom_point(color = 'seagreen1', size = 7, show_guide = TRUE) +
geom_point(aes(shape = factor(Year))) +
scale_x_continuous(breaks = c(2013, 2014, 2015))
View(OCC)
Fig1 = ggplot(OCC, aes(Month, Tickets)) + geom_point()
Fig1
Fig1 + facet(Year)
Fig1 + facet(OCC$Year)
Fig1 + facet_grid(. ~ OCC$Tickets)
Fig1 + facet_grid(OCC$Tickets ~ .)
Fig1 = ggplot(OCC, aes(Month, Tickets)) + geom_point(aes(factor(Year)))
Fig1
Fig1 = ggplot(OCC, aes(Month, Tickets)) + geom_point(aes(factor(Month)))
Fig1
library(reshape2)
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, group = Year)) + geom_point(aes(factor(Month)))
Fig1
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, group = Variable, fill = Variable)) + geom_point(aes(factor(Month)))
df <- read.table(header = TRUE, text = 'R    Quarter  X2013       X2014    Total.Result
1   Qtr 1   77282.13    66421.10    143703.2
2   Qtr 2   69174.64    76480.13    145654.8
3   Qtr 3   65238.47    79081.74    144320.2
4   Qtr 4   65429.73    109738.82   175168.5')
head(df)
df$R <- NULL
head(df)
dfm <- melt(df, id.vars = c('Quarter', 'Total.Result'))
dfm
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, group = Variable, fill = Variable)) + geom_point(aes(factor(Month)))
Fig1
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, group = Year, fill = Year)) + geom_point(aes(factor(Month)))
Fig1
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, group = Year)) + geom_point(aes(factor(Month)))
Fig1
OCC1 = melt(OCC, id.vars = c('Year', 'Tickets'))
OCC1
OCC1 = melt(OCC, id.vars = c('Year', 'Month'))
OCC1
rm(OCC1)
Fig1 = ggplot(OCC, aes(x = factor(Year), y= Tickets)) + geom_point()
Fig1
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets)) + geom_point()
Fig1
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, color = Year)) + geom_point()
Fig1
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, color = Year)) + geom_point(breaks = c(2013, 2014, 2015))
Fig1
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets, color = Year)) + geom_point()
Fig1
Fig1 + facet_grid(Year ~ .)
Fig1 = ggplot(OCC, aes(x = Month, y= Tickets)) + geom_point()
Fig1 + facet_grid(Year ~ .)
Fig1 + facet_grid(. ~ Year)
Fig1 + facet_grid(Year ~ Month)
Fig1 + facet_grid(Year ~ Month) + scale_x_continuous(expand=c(0,0))
Fig1 + facet_grid(Year ~ Month) + scale_x_discrete(expand=c(0,0))
Fig1 + facet_grid(. ~ Year)
Fig1 + facet_grid(. ~ Year) + theme(legend.position = "none")
Fig1 + facet_grid(. ~ Year)
Fig1 + facet_grid(. ~ Year) + theme(legend.position = "none")
Fig1 + facet_grid(Year ~ Month) + theme(legend.position = "none")
Fig1 + facet_grid(. ~ Year) + theme(legend.position = "none")
dat <- data.frame(x=runif(100),y=runif(100))
p <- ggplot(dat, aes(x=x, y=y)) +
geom_point() +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0))
p
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
p + theme(axis.line=element_blank(),axis.text.x=element_blank())
Fig1 + facet_grid(. ~ Year) + theme(axis.line=element_blank(), axis.text.x=element_blank())
Fig1 + facet_grid(. ~ Year) + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.ticks=element_blank())
Fig1 + facet_grid(. ~ Year) + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 10))
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 5))
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 3))
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 0.5))
Fig1 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
Fig2 = ggplot(OCC, aes(x = Month, y= 1/Tickets)) + geom_point()
Fig2 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
set.seed(072315)
dat <- data.frame(x=runif(100),y=runif(100))
p <- ggplot(dat, aes(x=x, y=y)) +
geom_point() +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0))
p
p + theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
p + theme(axis.line=element_blank(),axis.text.x=element_blank())
source('~/Desktop/OCC.R')
Fig2 + facet_grid(. ~ Year) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
source('~/Desktop/OCC.R', echo=TRUE)
OCC <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/OCC/OCC.csv")
df <- read.table(header = TRUE, text = 'R    Quarter  X2013       X2014    Total.Result
1   Qtr 1   77282.13    66421.10    143703.2
2   Qtr 2   69174.64    76480.13    145654.8
3   Qtr 3   65238.47    79081.74    144320.2
4   Qtr 4   65429.73    109738.82   175168.5')
df
str(df)
df$R <- NULL
head(df)
dfm <- melt(df, id.vars = c('Quarter', 'Total.Result'))
dfm
ggplot(dfm, aes(x = factor(Quarter), y = value, fill = variable) ) +
geom_bar(stat="identity", position = 'dodge')
d <- data.frame(Team1=c("Cowboys", "Giants", "Eagles", "Redskins"), Win=c(20, 13, 9, 12))
# basic layer and options
p <- ggplot(d, aes(y=Win)) + theme(axis.text.x=theme_text(angle=90, hjust=1))
p <- ggplot(d, aes(y=Win)) + theme(axis.text.x = element_text(angle=90, hjust=1))
# default plot (left panel)
# the variables are alphabetically reordered.
p + geom_bar(aes(x=Team1), stat="identity") + opts(title="Default")
p + geom_bar(aes(x=Team2), data=d, stat="identity") + theme(title="Order by manual")
p + geom_bar(aes(x=Team1), stat="identity") + theme(title="Default")
rm(list = ls())
sessionInfo()
library(ggplot2)
data(mtcars)
dim(mtcars); str(mtcars)
data(mtcars)
dim(mtcars); str(mtcars)
p = ggplot(mtcars, aes(x = wt, y = mpg))
p + geom_point()
p + geom_point(aes(color = qsec))
p + geom_point(aes(alpha = qsec))
edges = read.csv("edges.csv")
setwd("~/Dropbox")
setwd(~/Dropbox/EdX/The Analytics Edge/Unit 7/)
setwd("~/Dropbox/EdX")
setwd("~/Dropbox/EdX/The Analytics Edge")
setwd("~/Dropbox/EdX/The Analytics Edge/Unit 7")
setwd("~/Dropbox/EdX/The Analytics Edge/Unit 7/")
edges = read.csv("edges.csv")
users = read.csv("users.csv")
str(users)
str(edges)
table(users$school, users$gender)
attach(users)
table(users$school, users$gender)
library(igraph)
g = graph.data.frame(edges, FALSE, users)
g
plot(g)
g = graph.data.frame(users, FALSE, edges)
g = graph.data.frame(edges, TRUE, users)
plot(g)
g = graph.data.frame(users, TRUE, edges)
plot(g, vertex.size=5, vertex.label=NA)
nrpw(edges)
nrow(edges)
str(edges)
summary(g)
neighbors(g)
vcount(g)
ecount(g)
neighbors(g, v, mode = 1)
vcount(g)
ecount(g)
neighbors(g, v, mode = 1)
incident(g, v, mode=c("all", "out", "in", "total"))
is.directed(g)
are.connected(g, v1, v2)
are.connected(g, V1, V2)
get.edge(graph, id)
get.edge(g, id)
get.edges(g, es)
plot(g, vertex.size=5, vertex.label=NA)
plot(g, vertex.size=2, vertex.label=NA)
plot(g, vertex.size=2)
plot(g, vertex.label=NA)
plot(g, vertex.size=2, vertex.label=NA)
mean(degree(g))
V(graph)
V(g)
V(g)$size
degree(g, v = V(g))
V(g)$size = degree(g)/2 + 2
V(g)
V(g)$size
summary(V(g))
max(V(g)$size)
min(V(g)$size)
degree(g)
sum(degree(g) >= 10)
plot(g, vertex.label = NA)
plot(g, vertex.label = NA, curved = FALSE)
tkplot(g)
library(tcltk2)
version()
R.version()
R.Version()
