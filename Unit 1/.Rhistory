totalByMonth[[1]]
totalByMonth[[ ]]
totalByMonth[[3 ]]
which.min(totalByMonth)
totalByMonth[4]
arrestsByDays <- table(mvt$Weekday, mvt$Arrest)
totalByDays <- arrestsByDays[, 1] + arrestsByDays[, 2]
which.min(totalByDays)
which.max(totalByDays)
totalByDays
str(mvt)
arrests <- subset(mvt, Arrest == TRUE)
arrestsByMonth <- table(arrests$Month, arrests$Arrest)
totalByMonth <- arrestsByMonth[, 1] + arrestsByMonth[, 2]
arrestsByMonth
which.min(arrestsByMonth)
arrestsByMonth[which.min(arrestsByMonth)]
arrestsByMonth[[which.min(arrestsByMonth)]
arrestsByMonth[[which.min(arrestsByMonth]]
arrestsByMonth[[which.min(arrestsByMonth)]]
plot(arrestsByMonth)
arrestsByMonth[1]
which.max(arrestByMonth)
which.max(arrestsByMonth)
arrests <- subset(mvt, Arrest == TRUE)
arrestsByMonth <- table(arrests$Month, arrests$Arrest)
which.max(arrestsByMonth)
arrestsByMonth[5]
hist(mvt$Date, breaks=100)
boxplot(mvt$Arrest, mvt$Date)
boxplot(mvt$Date, mvt$Arrest)
boxplot(mvt$Date)
boxplot(mvt$Date, mvt$Arrest)
boxplot(mvt$Month, mvt$Arrest)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Month)
which.min(table(mvt$Month))
sum(mvt$Year==2001 & mvt$Arrest=="TRUE")/sum(mvt$Year==2001)
sum(mvt$Year==2007 & mvt$Arrest=="TRUE")/sum(mvt$Year==2007)
sum(mvt$Year==2012 & mvt$Arrest=="TRUE")/sum(mvt$Year==2012)
sort(table(mvt$LocationDescription))
str(mvt)
Top5 <- subset(mvt, LocationDescription %in% c('STREET', 'PARKING LOT/GARAGE(NON.RESID.)',  'ALLEY', 'GAS STATION', 'DRIVEWAY - RESIDENTIAL'))
Top5
View(Top5)
View(Top5)
nrow(Top5)
Top5$LocationDescription = factor(Top5$LocationDescription)
str(Top5)
table(Top5$LocationDescription)
sort(table(Top5$LocationDescription))
sort(table(Top5$LocationDescription[, Top5$Arrest = TRUE]))
Top5$LocationDescription[, Top5$Arrest = TRUE]
Top5[, Top5$Arrest = TRUE]
table(subset(Top5, Arrest = TRUE)$LocationDescription)
sort(table(mvt$LocationDescription))[73:78]
# Create a subset of data, only taking observations for which the theft happened in one of the top 5 locations
TopLocations = c("STREET", "PARKING LOT/GARAGE(NON.RESID.)", "ALLEY", "GAS STATION", "DRIVEWAY - RESIDENTIAL")
Top5 = subset(mvt, LocationDescription %in% TopLocations)
str(Top5)
# Refresh data for Top5
Top5$LocationDescription = factor(Top5$LocationDescription)
t=table(Top5$LocationDescription)
t
df1 <- as.data.frame(table(Top5$LocationDescription, Top5$Arrest))
View(df1)
df2<-rep(as.data.frame(t)[,2],2)
df2
t=table(Top5$LocationDescription)
df1 <- as.data.frame(table(Top5$LocationDescription, Top5$Arrest))
df2<-rep(as.data.frame(t)[,2],2)
df <- data.frame(df1, df2)
df$percentage <- round(df$Freq/df$df2, 3)*100
colnames(df)[1] = "Location"
colnames(df)[2] = "Arrest"
colnames(df)[3] = "Arrests"
colnames(df)[4] = "Thefts"
# Subset of a data in which an arrest was made
T = df[df$Arrest==TRUE,]
# Sort the subset data in descending order of percentage to find the location at which the highest percentage of arrests were made
T[order(-T$percentage),][1,]
# Day of the week in which the most motor vehicle thefts at gas stations happen
table(Top5$LocationDescription, Top5$Weekday)
str(Top5)
table(subset(Top5, Arrest = TRUE)$LocationDescription)
table(Top5)
table(Top5$LocationDescription)
table(Top5$LocationDescription, Top5$Arrest)
arrestLocation <- as.data.frame(table(Top5$LocationDescription, Top5$Arrest))
View(arrestLocation)
arrestLocation[ ,3]
arrestLocation[ ,3][1:5]
arrestLocation[ ,3][6:10]/(arrestLocation[ ,3][1:5]+ arrestLocation[ ,3][6:10])
arrestLocation[ ,3][6:10]*100/(arrestLocation[ ,3][1:5]+ arrestLocation[ ,3][6:10])
percentage <- as.data.fram(arrestLocation[ ,3][6:10]*100/(arrestLocation[ ,3][1:5]+ arrestLocation[ ,3][6:10]))
percentage <- as.data.frame(arrestLocation[ ,3][6:10]*100/(arrestLocation[ ,3][1:5]+ arrestLocation[ ,3][6:10]))
View(percentage)
df[1:5]
arrestLocation[1:5]
arrestLocation[,  1:5]
arrestLocation[,  1]
arrestLocation[1:5,  1]
arrestPercentage <- data.frame(as.data.frame(arrestLocation[1:5,  1], percentage))
arrestPercentage <- data.frame(as.data.frame(arrestLocation[1:5,  1]), percentage))
arrestPercentage <- data.frame(as.data.frame(arrestLocation[1:5,  1]), percentage)
View(arrestPercentage)
colnames(arrestPercentage)[1] = 'Location'
colnames(arrestPercentage)[2] = 'Arrest Percentage'
View(arrestPercentage)
View(arrestPercentage)
str(Top5)
gasStation <- subset(Top5, LocationDescription = 'GAS STATION')
table(gasStation$Day, gasStation$Arrest)
table(gasStation$Weekday, gasStation$Arrest)
table(gasStation$Weekday)
which.max(table(gasStation$Weekday))
gasStation <- subset(mvt, LocationDescription = 'GAS STATION')
which.max(table(gasStation$Weekday))
View(gasStation)
gasStation <- subset(mvt, LocationDescription = 'GAS STATION')
gasStation <- subset(Top5, LocationDescription = 'GAS STATION')
View(gasStation)
gasStation <- subset(Top5, LocationDescription == 'GAS STATION')
View(gasStation)
which.max(table(gasStation$Weekday))
sort(table(mvt$LocationDescription)
)
resDriveway <- subset(Top5, LocationDescription == 'DRIVEWAY - RESIDENTIAL')
which.max(table(resDriveway$Weekday))
which.min(table(resDriveway$Weekday))
IBM <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/IBMStock.csv")
View(IBM)
GE <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/GEStock.csv")
View(GE)
CocaCola <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/CocaColaStock.csv")
View(CocaCola)
Boeing <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/BoeingStock.csv")
View(Boeing)
ProcterGamble <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/ProcterGambleStock.csv")
View(ProcterGamble)
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
which.min(IBM$Date)
IBM%Date[which.min(IBM$Date)]
View(Boeing)
IBM$Date[which.min(IBM$Date)]
'ProcterGamble')
companies <- c('IBM',
'GE',
'CocaCola',
'Boeing',
'ProcterGamble')
View(CocaCola)
View(GE)
View(IBM)
for c in companies:
print c
for (c in companies){
print c
}
for (c in companies){
print (c)
}
for (c in companies){
print (which.max(c$Date))
}
mean(IBM$StockPrice)
min(GE$StockPrice)
max(CocaCola$StockPrice)
median(Boeing$StockPrice)
sd(ProcterGamble$StockPrice)
plot(CocaCola$StockPrice ~ CocaCola$Date)
plot(CocaCola$StockPrice ~ CocaCola$Date, pch = 18)
CocaCola$Date[which.max(CocaCola$StockPrice)]
CocaCola$Date[which.min(CocaCola$StockPrice)]
plot(ProcterGamble$StockPrice ~ ProcterGamble$Date, pch = 18)
lines(ProcterGamble$Date, ProcterGamble$StockPrice
)
plot(CocaCola$StockPrice ~ CocaCola$Date, pch = 18)
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
plot(CocaCola$StockPrice ~ CocaCola$Date, pch = 18, col = 'red')
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'blue')
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'blue', Ity = 2)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'blue', lty = 2)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'blue', lty = 2)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'blue', lty=2)
plot(CocaCola$StockPrice ~ CocaCola$Date, pch = 18, col = 'red', lty = 2)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'blue', lty=2)
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v=as.Date(c("1983-01-01")), lwd=1)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
abline(v=as.Date(c("2000-03-01")), lwd=1)
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col = 'blue')
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col = 'green')
lines(GE$Date[301:432], GE$StockPrice[301:432], col = 'purple')
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col = 'black')
abline(v=as.Date(c("1997-09-01")), lwd=1)
abline(v=as.Date(c("1997-11-01")), lwd=1)
months(IBM$Date)
USDA = read.csv("USDA.csv")
tapply(USDA$VitaminC, USDA$HighCarbs, summary, na.rm=TRUE)
table(USDA$HighSodium)
str(USDA)
tapply(USDA$VitaminC, USDA$HighCarbs, summary, na.rm=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
tapply(CocaCola$StockPrice, months(IBM$Date))
tapply(CocaCola$StockPrice, CocaCola$Date, months(IBM$Date))
tapply(CocaCola$StockPrice, mean, months(IBM$Date))
tapply(CocaCola$StockPrice, months(IBM$Date), mean)
mean(CocaCola$StockPrice)
tapply(CocaCola$StockPrice, months(IBM$Date), mean)[1]
tapply(CocaCola$StockPrice, months(IBM$Date), mean) - mean(CocaCola$StockPrice)
tapply(CocaCola$StockPrice, months(IBM$Date), mean) - mean(CocaCola$StockPrice) > 0
tapply(IBM$StockPrice, months(IBM$Date), mean) - mean(IBM$StockPrice) > 0
tapply(GE$StockPrice, months(GE$Date), mean) - mean(GE$StockPrice) > 0
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean) - mean(CocaCola$StockPrice) > 0
tapply(GE$StockPrice, months(GE$Date), mean)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
which.max(tapply(GE$StockPrice, months(GE$Date), mean))
which.max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))
CPS <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/CPSData.csv")
View(CPS)
View(CPS)
nrow(CPS)
str(CPS)
table(CPS$Industry)
which.max(table(CPS$Industry))
sort(table(CPS$Industry))
sort(table(CPS$State))
table(CPS$Citizenship)
prop.table(CPS$Citizenship)
prop.table(CPS$Citizenship)
prop.table(CPS$Citizenship, na.rm = TRUE)
proportion <- as.data.frame(table(CPS$Citizenship))
proportion
proportion[1, ]
proportion[1, ][1]
proportion[1, ][2]
proportion[1, ]
proportion[,1 ]
proportion[,2 ]
(proportion[1, ][2] + proportion[2, ][2])/sum(proportion[, 2])
sum(CPS$Citzenship == 'Citizen, Native' | CPS$Citzenship == 'Citizen, Naturalized')
sum(CPS$Citzenship == 'Citizen, Native' & CPS$Citzenship == 'Citizen, Naturalized')
sum(CPS$Citzenship == 'Citizen, Native')
CPS$Citzenship == 'Citizen, Native'
table(CPS$Citzenship)
str(CPS)
CPS$Citizenship
table(CPS$Citizenship)
sum(CPS$Citizenship == 'Citizen, Native' | CPS$Citizenship == 'Citizen, Naturalized' )
sum(CPS$Citizenship == 'Citizen, Native' | CPS$Citizenship == 'Citizen, Naturalized' )/nrow(CPS)
str(CPS)
table(CPS$Race)
table(CPS$Hispanic)
CPS$Race[ , CPS$Hispanic == 1]
CPS$Race[CPS$Hispanic == 1, ]
nrow(CPS[, CPS$Hispanic == 1])
CPS[, CPS$Hispanic == 1]
nrow(subset(CPS, Hispanic == 1))
table(CPS[, CPS$Hispanic == 1])
Hispanic <- subset(CPS, Hispanic == 1))
Hispanic <- subset(CPS, Hispanic == 1)
table(Hispanic$Race)
table(Hispanic$Race) > 250
is.na(CPS)
table(is.na(CPS))
str(CPS)
CPS[is.na(x), ]
summary(CPS)
CPSSummary <- summary(CPS)
View(CPSSummary)
is.na(CPS$Married)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
str(CPS)
table(CPS$State, CPS$MetroAreaCode, is.na(CPS$Married))
sum(table(CPS$State, CPS$MetroAreaCode, is.na(CPS$Married)))
table(CPS$MetroAreaCode, CPS$State, is.na(CPS$Married))
table(CPS$State, is.na(CPS$Married))
nrow(table(CPS$State, is.na(CPS$Married)))
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)))
str(CPS)
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$State, is.na(CPS$MetroAreaCode) & sum(CPS$MetroAreaCode == 0))
table(CPS$State, is.na(CPS$MetroAreaCode) & sum(CPS$MetroAreaCode == 1))
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$State, is.na(CPS$MetroAreaCode))[1]
table(CPS$State, is.na(CPS$MetroAreaCode))[1, ]
table(CPS$State, is.na(CPS$MetroAreaCode))[,1 ]
table(CPS$State, is.na(CPS$MetroAreaCode))[, 2][2]
table(CPS$State, is.na(CPS$MetroAreaCode))[, 2][ ,2]
table(CPS$State, is.na(CPS$MetroAreaCode))[, 2][1]
table(CPS$State, is.na(CPS$MetroAreaCode))[, 2][[1]
)
table(CPS$State, is.na(CPS$MetroAreaCode))[, 2][[1]]
table(CPS$State, is.na(CPS$MetroAreaCode))[, 2]
table(CPS$State, is.na(CPS$MetroAreaCode))[, 2] == 0
sum(table(CPS$State, is.na(CPS$MetroAreaCode))[, 2] == 0)
sum(table(CPS$State, is.na(CPS$MetroAreaCode))[, 2] == 1)
sum(table(CPS$State, is.na(CPS$MetroAreaCode))[, 1] == 0)
table(CPS$State, is.na(CPS$MetroAreaCode))[, 1]
sum(table(CPS$State, is.na(CPS$MetroAreaCode))[, 1] == 0)
table(CPS$State, is.na(CPS$MetroAreaCode)
)
table(CPS$State, CPS$MetroAreaCode)
str(CPS)
table(CPS$Region, CPS$State)
sum(table(CPS$State, is.na(CPS$MetroAreaCode))
sum(table(CPS$State, is.na(CPS$MetroAreaCode)))
table(CPS$State, is.na(CPS$MetroAreaCode))
sum(table(CPS$State, is.na(CPS$MetroAreaCode))[, 1] == 0)
table(CPS$State, is.na(CPS$MetroAreaCode))[, 1] == 0
table(CPS$Region, is.na(CPS$MetroAreaCode))
RegProp <- table(CPS$Region, is.na(CPS$MetroAreaCode))
RegProp
RegProp[ ,1]
RegProp[ ,2]
RegProp[ ,2]
percentage <- as.data.frame(RegProp[ ,1][1:4]*100/(RegProp[ ,1][1:4]+ RegProp[ ,1][1:4))
percentage <- as.data.frame(RegProp[ ,1][1:4]*100/(RegProp[ ,1][1:4]+ RegProp[ ,1][1:4])
percentage <- as.data.frame(RegProp[ ,1][1:4]*100/(RegProp[ ,1][1:4]+ RegProp[ ,1][1:4]))
View(percentage)
RegProp[ ,1][1:4]
RegProp[ ,1][1:4] + RegProp[ ,2][1:4]
RegProp[ ,1][1:4](RegProp[ ,1][1:4] + RegProp[ ,2][1:4])
RegProp[ ,1][1:4]/(RegProp[ ,1][1:4] + RegProp[ ,2][1:4])
RegProp[ ,2][1:4]/(RegProp[ ,1][1:4] + RegProp[ ,2][1:4])
RegProp[ ,2]/(RegProp[ ,1] + RegProp[ ,2])
tapply(CPS$State, mean(CPS$MetroAreaCode == 1))
tapply(CPS$State, CPS$MetroAreaCode == 1, mean))
tapply(CPS$State, CPS$MetroAreaCode == 1, mean)
tapply(CPS$State, CPS$MetroAreaCode, mean)
tapply(CPS$State, CPS$MetroAreaCode, mean, na.rm = TRUE)
tapply(CPS$MetroAreaCode, CPS$State, mean)
tapply(CPS$MetroAreaCode, CPS$State, mean, na.rm = TRUE)
tapply(is.na(CPS$MetroAreaCode), CPS$State, mean, na.rm = TRUE)
sort(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean, na.rm = TRUE))
MetroAreaCodes <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/MetroAreaCodes.csv")
View(MetroAreaCodes)
CountryCodes <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/CountryCodes.csv")
View(CountryCodes)
MetroAreaMap <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/MetroAreaCodes.csv")
View(MetroAreaMap)
CountryMap <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/CountryCodes.csv")
View(CountryMap)
nrow(MetroAreaMap)
nrow(CountryMap)
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
str(CPS)
View(MetroAreaMap)
sum(is.na(CPS$MetroAreaMap))
sum(is.na(CPS$MetroArea))
sort(table(CPS$MetroArea))
which.max(table(CPS$MetroArea))
str(CPS)
hispanic <- subset(CPS, Hispanic == 1)
tapply(hispanic$MetroArea)
table(hispanic$MetroArea)
sort(table(hispanic$MetroArea))
table(CPS$MetroArea)
sort(table(CPS$Country))
table(CPS$MetroArea)
table(CPS$Hispanic)
table(CPS$MetroArea, CPS$Hispanic)
tabpply(CPS$MetroArea, CPS$Hispanic, mean)
tabpply(is.na(CPS$MetroArea), CPS$Hispanic, sum)
tapply(CPS$MetroArea, CPS$Hispanic, sum)
tapply(is.na(CPS$MetroArea), CPS$Hispanic, sum)
hispanic <- table(CPS$MetroArea, CPS$Hispanic)
hispanic[, 1]
hispanic
hispanic[ ,3]/(hispanic[ ,2] + hispanic[ ,3])
hispanic[,1][1]
hispanic[,2][1]
hispanic[ ,2]/(hispanic[ ,1] + hispanic[ ,2])
sort(hispanic[ ,2]/(hispanic[ ,1] + hispanic[ ,2]))
table(CPS$Race == "Asian")
table(CPS$MetroArea, CPS$Race == "Asian")
Asia <- table(CPS$MetroArea, CPS$Race == "Asian")
sort(Asian[ ,2]/(Asian[ ,1] + Asian[ ,2]) >= 0.20)
Asian <- table(CPS$MetroArea, CPS$Race == "Asian")
sort(Asian[ ,2]/(Asian[ ,1] + Asian[ ,2]) >= 0.20)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = TRUE))
str(CPS)
table(CPS$MetroArea)
CPSData <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/CPSData.csv")
View(CPSData)
str(CPSData)
str(CPS)
table(CPS$MetroArea, CPS$CountryOfBirthCode)
table( CPS$CountryOfBirthCode, CPS$MetroArea)
table(CPS$MetroArea, CPS$CountryOfBirthCode)
table(CPS$CountryOfBirthCode)
CPS[CPS$CountryOfBirthCode == '',]
which.max(hispanic[ ,2]/(hispanic[ ,1] + hispanic[ ,2]))
which.max(tapply(CPS$Hispanic, CPS$MetroArea, mean))
which.min(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = TRUE))
summary(CPS$MetroArea)
summary(CPS)
CPS <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/CPSData.csv")
View(CPS)
CPS = merge(CPS, CountryMap, by.x = "CountryOfBirthCode", by.y = "Code", all.x = TRUE)
summary(CPS)
table(CPS$Country)
sort(table(CPS$Country))
str(CPS)
sort(table(CPS$Citizenship, CPS$Country ))
notUS <- table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA",
CPS$Country != "United States")
notUS
table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA",
CPS$Country != "United States")
table(CPS$Country != 'United States')
table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA")
CPSData <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/CPSData.csv")
View(CPSData)
table(CPSData$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA")
aPoll <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/AnonymityPoll.csv")
View(aPoll)
str(aPoll)
summary(aPoll)
table(aPoll$Smartphone)
472 + 487
nrow(aPoll) - 487
nrow(aPoll) - 487 - 472
Poll <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/AnonymityPoll.csv")
View(Poll)
table(poll$Sex, poll$Region)
poll <- read.csv("~/Dropbox/EdX/The Analytics Edge/Unit 1/AnonymityPoll.csv")
table(poll$Sex, poll$Region)
str(pol)
str(poll)
table(poll$Region, poll$State)
table(poll$State, poll$Region)
table(poll$State == 'Midwest', poll$Region)
table(poll$State = 'Midwest', poll$Region)
Midwest <- subset(poll, Region = 'Midwest')
table(Midwest$State, Midwest$Region)
table(Midwest$State)
Midwest <- subset(poll, Region == 'Midwest')
table(Midwest$State)
sort(table(Midwest$State))
str(poll)
table(poll$Sex, poll$Region)
South <- subset(poll, Region == 'South')
which.max(table(South$State))
table(poll$Internet.Use, poll$Smartphone)
summary(poll)
table(poll$Internet.Use)
table(is.na(poll$Internet.Use))
226+775
table(is.na(poll$Smartphone))
limited <- subset(poll, Internet.Use == 1 | Smartphone == 1)
summary(limited)
table(limited$Info.On.Internet)
table(limited$Worry.About.Info)/sum(limited$Worry.About.Info == 1 | limited$Worry.About.Info == 0)
table(limited$Worry.About.Info)
sum(limited$Worry.About.Info == 1 | limited$Worry.About.Info == 0)
sum(limited$Worry.About.Info == 1 | limited$Worry.About.Info == 0, na.rm = TRUE)
table(limited$Worry.About.Info)/sum(limited$Worry.About.Info == 1 | limited$Worry.About.Info == 0, na.rm = TRUE)
table(limited$Worry.About.Info, limited$Internet.Use)/sum(limited$Worry.About.Info == 1 | limited$Worry.About.Info == 0, na.rm = TRUE)
str(limited)
table(limited$Anonymity.Possible, limited$Internet.Use)
table(limited$Anonymity.Possible, limited$Internet.Use)/(11+264+4+274)
sum(limited$Anonymity.Possible == 1, na.rm = TRUE)/
sum(limited$Anonymity.Possible == 1 | limited$Anonymity.Possible == 0, na.rm = TRUE)
sum(limited$Tried.Masking.Identity == 1, na.rm = TRUE)/
sum(limited$Tried.Masking.Identity == 1 | limited$Tried.Masking.Identity == 0, na.rm = TRUE)
table(limited$Tried.Masking.Identity)
128/(656+128)
str(limitted)
str(limited)
table(limited$Privacy.Laws.Effective)
186/(541+186)
hist(limited$Age)
hist(limited$Age, breaks = 50)
plot(limited$Age, limited$Info.On.Internet)
table(imited$Age, limited$Info.On.Internet)
table(limited$Age, limited$Info.On.Internet)
plot(limited$Age, jitter(limited$Info.On.Internet))
abline(v = 60)
which.max(table(limited$Age, limited$Info.On.Internet))
table(limited$Age, limited$Info.On.Internet)[36]
table(limited$Age, limited$Info.On.Internet)[36, ]
table(limited$Age, limited$Info.On.Internet)[93, ]
table(limited$Age, limited$Info.On.Internet)[45, ]
table(limited$Age, limited$Info.On.Internet)[ , ]
which.max(table(limited$Age, limited$Info.On.Internet))
which.min(table(limited$Age, limited$Info.On.Internet))
table(limited$Age, limited$Info.On.Internet)[2 , ]
a <- as.data.frame(table(limited$Age, limited$Info.On.Internet))
atable(limited$Age, limited$Info.On.Internet)[2 , ]
a
a$Var1
plot(a$Var1, a$Freq)
max(table(limited$Age, limited$Info.On.Internet))
max(table(limited$Age, limited$Info.On.Internet))
which.max(table(limited$Age, limited$Info.On.Internet))
plot(limited$Age, jitter(limited$Info.On.Internet))
plot(limited$Age, jitter(limited$Info.On.Internet))
tapply(limited$Smartphone, limited$Info.On.Internet, mean na.rm = T)
tapply(limited$Smartphone, limited$Info.On.Internet, mean, na.rm = T)
tapply(limited$Info.On.Internet, limited$Smartphone, mean, na.rm = T)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, mean, na.rm = T)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, summary, na.rm = T)
